#!/bin/sh
# initramfs local-premount script for fixrtc

os=CUR_OS

PREREQ=""
if [ $os = "ubuntu" ]
then
	MANIFEST_PATH=${MANIFEST_PATH}
	PARTITION_INFO=${PARTITION_INFO}
	ROOT_MOUNT_PATH=${ROOT}
else
	source /lib/dracut-lib.sh
	MANIFEST_PATH="$(getarg MANIFEST_PATH=)"
	PARTITION_INFO="$(getarg PARTITION_INFO=)"
	ROOT_MOUNT_PATH="$(getarg root=)"

	MANIFEST_PATH=`echo $MANIFEST_PATH | sed s/\"//g`
	PARTITION_INFO=`echo $PARTITION_INFO | sed s/\"//g`
	ROOT_MOUNT_PATH=`echo $ROOT_MOUNT_PATH | sed s/\"//g`
fi
# Output pre-requisites
prereqs()
{
        echo "$PREREQ"
}

case "$1" in
    prereqs)
        prereqs
        exit 0
        ;;
esac


#LOADING - RPMMIO DRIVERS
load_rpmmio_drivers()
{
	echo "RPMMIO Driver Load - STARTED"
	echo "Load our own rpmmio driver, and create device rpmmio0, for direct TPM access"
	insmod /lib/modules/`uname -r`/kernel/drivers/char/tpm/rpmmio.ko
	major=$(awk '$2 == "rpmmio" {print $1}' /proc/devices)
	mknod /dev/rpmmio0 c $major 0
	chmod 777 /dev/rpmmio0
	echo "RPMMIO Driver Load - COMPLETE"
}

#MOUNT / IN /TMP/ROOT
mount_root()
{
	echo "/ Mount STARTED"
	tmp_root=/tmp/root
	mkdir -p $tmp_root
	#echo -e "\nMount ${roflag} ${FSTYPE:+-t ${FSTYPE} }${ROOTFLAGS} ${ROOT} ${tmp_root}"
	#mount ${FSTYPE:+-t ${FSTYPE} }${ROOTFLAGS} ${ROOT} $tmp_root
	#root_mntDev=`echo $root | awk 'BEGIN{FS=":"}{print $2}'`
	echo $ROOT_MOUNT_PATH
	mount -t auto $ROOT_MOUNT_PATH $tmp_root
	echo "/ Mount COMPLETED"
}



#UNMOUNT THE PARTITIONS
unmount_partitions()
{
	log "Unmount Partitions - STARTED"
	for value in `echo $part_info | awk 'BEGIN{FS=","} { for ( i = 1 ; i <= NF ; i++ ) print $i }' `
	do
        	mntDevice=`echo $value | awk 'BEGIN{FS=":"}{ print $1}'`
        	mntPoint=`echo $value | awk 'BEGIN{FS=":"}{ print $2}'`
        	if [ $mntPoint = "/" ]
        	then
                	echo "Skipping unmount /"
        	else
                	umount $tmp_root/$mntPoint
                	rm -rf $tmp_root/$mntPoint
        	fi
 	done

	#Unmount Root Partition
	umount $tmp_root
	echo "Unmount Paritions - COMPLETE"

}
#End of Unmount Fn



#MOUNT OTHER PARTITIONS
mount_partitions()
{
	log "Mount Other Partitions - STARTED"
	part_info=$PARTITION_INFO
	part_info=`echo $part_info | sed 's/{\|}//g'`
	for value in `echo $part_info | awk 'BEGIN{FS=","} { for ( i = 1 ; i <= NF ; i++ ) print $i }' ` 
 	do 
		mntDevice=`echo $value | awk 'BEGIN{FS=":"}{ print $1}'`
	 	mntPoint=`echo $value | awk 'BEGIN{FS=":"}{ print $2}'`
	 	if [ $mntPoint = "/" ] 
	 	then 
			echo "Skipping mount for / " 
	 	else 
			mkdir -p $tmp_root/$mntPoint
			mount -t auto $mntDevice $tmp_root/$mntPoint 
	 	fi 
	done
	log "Mount Partitions - COMPLETE"
}

log()
{
	echo $1
	echo $1 >> $tcb_log_file	
}


#CALCULATE THE HASHES MAKING USE OF VERIFIER
manifest_verify()
{
	cumulative_hash=$tmp_root/var/log/trustagent/cumulative_hash.sha
	echo "" > $cumulative_hash

	log "TCB Verification - STARTED"
	#Grab the tcb-manifest file path from Grub Entry
	manifest_path=$MANIFEST_PATH
	if [ ! -e "$tmp_root/$manifest_path" ]; then
        	log "Manifest Path INCORRECT.File not Found at $tmp_root/$manifest_path"
		unmount_partitions
        	exit 1
	fi

	#Run the Verifier and the check for its results
	/bin/verifier $tmp_root/$manifest_path NA HOST >> $tcb_log_file 2>&1
	if [ $? -ne 0 ]; then
		log "TCB Verification FAILED"
		unmount_partitions
		exit 1
	else
		log "TCB Verification COMPLETE"
	fi
}


#EXTEND THE PCR 19 VALUE BY MAKING USE OF TPMEXTEND
tpm_extend()
{
	image_hash=""
	
	log "TPM Extend STARTED"
	#Grab the value of tpm_version from Grub Entry

	log "SHA hash will be used to extend PCR"
	image_hash=`cat $cumulative_hash`
	if [ "$image_hash" = "" ]
	then
		log "No cumulative hash to extend"
		unmount_partitions
		exit 1
	fi
	log "Run TPM Extend for Extending PCR 19"
	log "TPM Extend Log"
	
	/bin/tpmextend 19 $image_hash >> $tcb_log_file 2>&1
	if [ $? -ne 0 ]; then
		log "TPM extend failed."
		unmount_partitions
		exit 1
	fi
}

#Step 1 - Load the RPMMIO Drivers
load_rpmmio_drivers

#Step 2 - Mount /
mount_root

tcb_log_file=$tmp_root/var/log/tcb.log
log "Log Creation Time: `date`"

#Step 3 - Mount Other Partitions
mount_partitions

#Step 4 - Measurement - Verifier
manifest_verify

#Step 5 - Extend PCR 19 using TPM Extend
tpm_extend

#Step 6 - Unmount all the Partitions that were mounted in the process
unmount_partitions
echo "END OF MEASUREMENT AGENT"

