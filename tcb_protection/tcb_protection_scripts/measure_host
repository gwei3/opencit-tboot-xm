#!/bin/sh
# initramfs local-premount script for fixrtc
#%stage: filesystem
#%depends: resume
#%programs: /bin/verifier /bin/tpmextend /usr/bin/sha1sum /usr/bin/sha256sum 
#%modules: tpm

TBOOTXM_REPOSITORY="/var/tbootxm"
CONFIG_FILE="$TBOOTXM_REPOSITORY/measure_host.cfg"
INITRD_LOG_FILE="/tmp/initrd.log"
echo "" > $INITRD_LOG_FILE

log()
{
	echo $1
	echo $1 >> $INITRD_LOG_FILE
}
log "Log Creation Time: `date`"
os=CUR_OS

PREREQ=""

if [ $os = "ubuntu" ]
then
        ROOT_MOUNT_PATH=${ROOT}
	CONFIG_FILE=${CONFIG_FILE_PATH}
elif [ $os = "suse"  ]
then
        source /config/mount.sh
        ROOT_MOUNT_PATH=${rootdev}
	CONFIG_FILE=${CONFIG_FILE_PATH}
else
        source /lib/dracut-lib.sh
        ROOT_MOUNT_PATH="$(getarg root=)"
        ROOT_MOUNT_PATH=`echo $ROOT_MOUNT_PATH | sed s/\"//g`
	CONFIG_FILE="$(getarg CONFIG_FILE_PATH=)"
fi

log "CONFIG_FILE_PATH = $CONFIG_FILE"
if [ ! $CONFIG_FILE ] || [ -z $CONFIG_FILE ]
then
	#CONFIG_FILE="/measure_host.cfg"	
	CONFIG_FILE="/tbootxm.conf"
	log "CONFIG_FILE_PATH = $CONFIG_FILE"
fi

log "ROOT_MOUNT_PATH = $ROOT_MOUNT_PATH"
CONFIG_FILE=`echo $CONFIG_FILE | sed s/\"//g`	
log "CONFIG_FILE_PATH = $CONFIG_FILE"
load_configuration()
{
	log "Loading configuration"
	if [ -e $tmp_root/$CONFIG_FILE ]
	then
		log "configuration file : $CONFIG_FILE exist"
	else
		log "Configuration file not found"
		unmount_partitions
		return 1
	fi
	for key in `cat $tmp_root/$CONFIG_FILE | awk 'BEGIN {FS="="}{print $1}'`
	do
		log "key = $key"
		keylen=`echo -n $key | wc -c`
		log "keylen = $keylen"
		keylen=`expr $keylen + 2`
		log "keylen = $keylen"
		value=`grep $key $tmp_root/$CONFIG_FILE | cut -c $keylen-`
		log "`echo $value`"
		log "`echo Exporting $key=$value`"
		export $key=$value
	done
	MANIFEST_PATH=`echo $MANIFEST_PATH | sed s/\"//g`
	log "MANIFEST_PATH=${MANIFEST_PATH}"
	PARTITION_INFO=`echo $PARTITION_INFO | sed s/\"//g`
	log "PARTITION_INFO=${PARTITION_INFO}"
	log "Configuration loaded"
	return 0
}
# Output pre-requisites
prereqs()
{
        echo "$PREREQ"
}

case "$1" in
    prereqs)
        prereqs
        exit 0
        ;;
esac


#LOADING - RPMMIO DRIVERS
load_rpmmio_drivers()
{
	log "RPMMIO Driver Load - STARTED"

	log "Load our own rpmmio driver, and create device rpmmio0, for direct TPM access"
	insmod /lib/modules/`uname -r`/kernel/drivers/char/tpm/rpmmio.ko
	major=$(awk '$2 == "rpmmio" {print $1}' /proc/devices)
	mknod /dev/rpmmio0 c $major 0
	chmod 777 /dev/rpmmio0
	log "RPMMIO Driver Load - COMPLETE"
}

#MOUNT / IN /TMP/ROOT
mount_root()
{
	log "/ Mount STARTED"
	tmp_root=/tmp/root
	mkdir -p $tmp_root
	#echo -e "\nMount ${roflag} ${FSTYPE:+-t ${FSTYPE} }${ROOTFLAGS} ${ROOT} ${tmp_root}"
	#mount ${FSTYPE:+-t ${FSTYPE} }${ROOTFLAGS} ${ROOT} $tmp_root
	#root_mntDev=`echo $root | awk 'BEGIN{FS=":"}{print $2}'`
	echo $ROOT_MOUNT_PATH
	mount -t auto $ROOT_MOUNT_PATH $tmp_root
	if [ $? -eq 0 ] ; then
		log "Root mounted successfully"
	else
		log "Root mount failed, waiting for 15 seconds"
	fi
	log "/ Mount COMPLETED"
}



#UNMOUNT THE PARTITIONS
unmount_partitions()
{
	log "Unmount Partitions - STARTED"
	for mntPoint in `echo $part_info | awk 'BEGIN{FS=","} { for ( i = 1 ; i <= NF ; i++ ) print $i }' | cut -f2 -d":" | sort -r`
	do
		log "unmounting $tmp_root/$mntPoint"
		if [ $mntPoint = "/" ]
		then
			cat $INITRD_LOG_FILE >> $tcb_log_file
			umount $tmp_root/$mntPoint
		else
			umount $tmp_root/$mntPoint
		fi
		if [ $? -ne 0 ]
		then
			log "ERROR: Failed to unmount $tmp_root/$mntPoint"
		else
			log "Successfully unmounted $tmp_root/$mntPoint"
		fi
	done
	log "Unmount Paritions - COMPLETE"
}
#End of Unmount Fn



#MOUNT OTHER PARTITIONS
mount_partitions()
{
	log "Mount Other Partitions - STARTED"
	part_info=$PARTITION_INFO
	part_info=`echo $part_info | sed 's/{\|}//g'`
	for value in `echo $part_info | awk 'BEGIN{FS=","} { for ( i = 1 ; i <= NF ; i++ ) print $i }' ` 
 	do 
		mntDevice=`echo $value | awk 'BEGIN{FS=":"}{ print $1}'`
	 	mntPoint=`echo $value | awk 'BEGIN{FS=":"}{ print $2}'`
	 	if [ $mntPoint = "/" ] 
	 	then 
			log "Skipping mount for / "
	 	else 
			mkdir -p $tmp_root/$mntPoint
			mount -t auto $mntDevice $tmp_root/$mntPoint 
	 	fi 
	done
	log "Mount Partitions - COMPLETE"
}

#CALCULATE THE HASHES MAKING USE OF VERIFIER
manifest_verify()
{
	cumulative_hash=$tmp_root/var/log/trustagent/measurement.sha
	log "TCB Verification - STARTED"
	#Grab the tcb-manifest file path from Grub Entry
	manifest_path=$MANIFEST_PATH
	if [ ! -e "$tmp_root/$manifest_path" ]; then
        	log "Manifest Path INCORRECT.File not Found at $tmp_root/$manifest_path"
		unmount_partitions
        	return 1
	fi
	
	rm -f "$cumulative_hash"*
	
	#Run the Verifier and the check for its results
	mkdir -p ${tmp_root}/var/log/trustagent/
	chmod 0755 ${tmp_root}/var/log/trustagent/
	/bin/verifier $tmp_root/$manifest_path $tmp_root/ HOST >> $INITRD_LOG_FILE 2>&1
	if [ $? -ne 0 ]; then
		log "TCB Verification FAILED"
		unmount_partitions
		return 1 
	else
		log "TCB Verification COMPLETE"
		return 0
	fi
}


#EXTEND THE PCR 19 VALUE BY MAKING USE OF TPMEXTEND
tpm_extend()
{
	log "hash file prefix : $cumulative_hash"
	if [ -e "${cumulative_hash}1" ]
        then
                cumulative_hash="${cumulative_hash}1"
        else
                cumulative_hash="${cumulative_hash}256"
        fi
        log "cumulative hash file : $cumulative_hash"	
	image_hash=""
	
	log "TPM Extend STARTED"
	#Grab the value of tpm_version from Grub Entry

	log "SHA hash will be used to extend PCR"
	image_hash=`cat $cumulative_hash`
	if [ "$image_hash" = "" ]
	then
		log "No cumulative hash to extend"
		unmount_partitions
		return 1
	fi
	log "Run TPM Extend for Extending PCR 19"
	log "TPM Extend Log"
	
	/bin/tpmextend 19 $image_hash >> $INITRD_LOG_FILE 2>&1
	if [ $? -ne 0 ]; then
		log "TPM extend failed."
		unmount_partitions
		return 1 
	fi
	return 0
}

#Step 1 - Load the RPMMIO Drivers
load_rpmmio_drivers

#Step 2 - Mount /
mount_root

tcb_log_file=$tmp_root/var/log/tcb.log
log "Activate all logical volumes"
log "`lvm vgchange -ay`"


#load configuration 
load_configuration

if [ $? -eq 0 ]
then

	#Step 3 - Mount Other Partitions
	mount_partitions

	#Step 4 - Measurement - Verifier
	manifest_verify

	if [ $? -eq 0 ]
	then
		#Step 5 - Extend PCR 19 using TPM Extend
		tpm_extend
		if [ $? -eq 0 ]
		then
			#Step 6 - Unmount all the Partitions that were mounted in the process
			unmount_partitions
		fi
	fi
fi
#log "END OF MEASUREMENT AGENT"


