#!/bin/sh

PREREQ=""

prereqs()
{
    echo "$PREREQ"
}

case $1 in
# get pre-requisites
prereqs)
    prereqs
    exit 0
    ;;
esac

CONF_PARTITION=""
BOOT_PARTITION="/bootpartition"

echo "Inside mountroot routine ..............${rootmnt}, try boot from lvm"
mkdir -p ${rootmnt}

c=$(cat /proc/cmdline)
c="${c##*host_lvm_device=}"
host_lvm_device="${c%% *}"

c=$(cat /proc/cmdline)
c="${c##*boot_partition=}"
boot_partition="${c%% *}"

c=$(cat /proc/cmdline)
c="${c##*conf_partition=}"
conf_partition="${c%% *}"


c=$(cat /proc/cmdline)
c="${c##*storage_lvm_device=}"
storage_lvm_device="${c%% *}"

c=$(cat /proc/cmdline)
c="${c##*swap_lvm_device=}"
swap_lvm_device="${c%% *}"

c=$(cat /proc/cmdline)
c="${c##*lvm_enc_key=}"
lvm_enc_key="${c%% *}"

if [ -z "$host_lvm_device" ]; then
    echo "LVM device for host not provided in kernel arguments"
    exit 1
fi

if [ -z "$storage_lvm_device" ]; then
    echo "encrypted LVM device for storage not provided in kernel arguments"
    exit 1
fi

if [ -z "$lvm_enc_key" ]; then
    echo "The encryption key for encrypted LVM device for storage not provided in kernel arguments"
    exit 1
fi

if [ -z "$boot_partition" ]; then
    echo "boot partition is not provided in kernel arguments"
    exit 1
fi

echo "host lvm device is ${host_lvm_device}"
echo "plain boot partition is ${boot_partition}"

echo "load our own rpmmio driver, and create device rpmmio0, for direct TPM access"
insmod /lib/modules/KERNELVERSION/kernel/drivers/char/tpm/rpmmio.ko
major=$(awk '$2 == "rpmmio" {print $1}' /proc/devices)
mknod /dev/rpmmio0 c $major 0
chmod 777 /dev/rpmmio0

echo "mount root FS in clear"
mkdir $BOOT_PARTITION
sleep 5
mount -t ext4 $boot_partition $BOOT_PARTITION

if [ "$boot_partition" != "$conf_partition" ]; then
    CONF_PARTITION="/confpartition"
    mkdir $CONF_PARTITION
    mount -t ext4 $conf_partition $CONF_PARTITION
else
    CONF_PARTITION=$BOOT_PARTITION
fi

echo "prepare encrypted disk partition now"
dd if=/dev/urandom of=mykeyfile bs=1k count=2 

echo "encrypt and open the encrypt disk partition"
echo YES | cryptsetup -c aes-xts-plain64 luksFormat --key-file=mykeyfile $host_lvm_device
cryptsetup -c aes-xts-plain64 luksOpen --key-file=/mykeyfile $host_lvm_device crypt-rootFS

mkfs.ext4 /dev/mapper/crypt-rootFS
mount -t ext4 /dev/mapper/crypt-rootFS ${rootmnt}
echo "Created filsystem on ${rootmnt}.............."

echo "Open parition for storage"
cryptsetup -c aes-xts-plain64 luksOpen --key-file=$CONF_PARTITION/$lvm_enc_key  $storage_lvm_device crypt-storage

echo "Open parition for swap"
cryptsetup -c aes-xts-plain64 luksOpen --key-file=$CONF_PARTITION/$lvm_enc_key  $swap_lvm_device crypt-swap

echo "Cleaning up temporary encryption keys"
rm -f mykeyfile

##XEN_SPECIFIC_CODE


exit 0
